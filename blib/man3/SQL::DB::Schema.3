.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SQL::DB::Schema 3"
.TH SQL::DB::Schema 3 "2012-06-15" "perl v5.12.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::DB::Schema \- Table and column definitions for SQL::DB
.SH "VERSION"
.IX Header "VERSION"
0.191.0. Development release.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use SQL::DB::Schema;
\&
\&    my $schema = SQL::DB::Schema\->new(name => \*(Aqmyschema\*(Aq);
\&
\&    $schema\->define(@table_1_definition);
\&    $schema\->define(@table_2_definition);
\&    $schema\->define(@table_3_definition);
\&    ...
\&    $schema\->define(@table_N_definition);
\&    
\&    my ($itable_1, $itable_3) = $schema\->irow(qw/table_1, table_3/)
\&    my ($utable_1, $utable_3) = $schema\->urow(qw/table_1, table_3/)
\&    my ($stable_1, $stable_2) = $schema\->srow(qw/table_1, table_2/)
\&
\&    # Retrieve a previously elsewhere created schema:
\&    my $other = SQL::DB::Schema\->new(name => \*(AqMy::Schema\*(Aq, load => 1);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBSQL::DB::Schema\fR objects hold the table and column definitions used
by \s-1SQL::DB\s0 for creating \s-1SQL\s0 queries.
.PP
The \s-1SYNOPSIS\s0 and this documentation show how this module is used but
you should never write such code by hand.  Schema information is either
automatically retrieved by \s-1SQL::DB\s0 at run-time or pre-generated with
the sqldb-schema(1) command-line program.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.ie n .IP "new( name => $name, [ load => $load ] ) \-> SQL::DB::Schema" 4
.el .IP "new( name => \f(CW$name\fR, [ load => \f(CW$load\fR ] ) \-> SQL::DB::Schema" 4
.IX Item "new( name => $name, [ load => $load ] ) -> SQL::DB::Schema"
Create a new schema object. The \f(CW$name\fR attribute is required. If the
optional \f(CW$load\fR is true then \f(CW$name\fR is assumed to be a Module name and
will be \f(CW\*(C`required\*(C'\fR. The module's schema will be retrieved using a
\&\f(CW\*(C`definition()\*(C'\fR class method and then cleared using a \f(CW\*(C`clear()\*(C'\fR class
method.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.IP "name" 4
.IX Item "name"
The name of the schema as given to the constructor.
.IP "package_root" 4
.IX Item "package_root"
The name prefix for internally generated classes.
.IP "load" 4
.IX Item "load"
The value of the load argument given to the constructor.
.SH "METHODS"
.IX Header "METHODS"
.IP "define( \e@column_info )" 4
.IX Item "define( @column_info )"
Add table/column information to the schema. The \e@column_info
array-reference must be the same as the structure returned from a
\&\s-1DBI\s0 \*(L"\fIcolumn_info()\fR\*(R" call. This method will confess if duplicate
column information is given.
.ie n .IP "not_known(@tables) \-> @not_known" 4
.el .IP "not_known(@tables) \-> \f(CW@not_known\fR" 4
.IX Item "not_known(@tables) -> @not_known"
Returns the \f(CW@tables\fR which are not known in the schema.
.ie n .IP "irow( $table, [ $table2 ] ) \-> CODEref" 4
.el .IP "irow( \f(CW$table\fR, [ \f(CW$table2\fR ] ) \-> CODEref" 4
.IX Item "irow( $table, [ $table2 ] ) -> CODEref"
Returns coderefs representing \f(CW$tabl\fRe(s). Each coderef called with
column names returns a string suitable for an \s-1INSERT\s0 operation.  These
coderefs can be used in \s-1SQL::DB\s0's \*(L"\fIdo()\fR\*(R" method (for \s-1INSERT\s0
queries).
.ie n .IP "urow( $table, [ $table2 ] ) \-> SQL::DB::Expr based objects" 4
.el .IP "urow( \f(CW$table\fR, [ \f(CW$table2\fR ] ) \-> SQL::DB::Expr based objects" 4
.IX Item "urow( $table, [ $table2 ] ) -> SQL::DB::Expr based objects"
Returns objects representing abstract rows from \f(CW$tabl\fRe(s). Each object
has a method for each column in the table. These urow objects can be
used in \s-1SQL::DB\s0's \*(L"\fIdo()\fR\*(R" method (\s-1UPDATE\s0 or \s-1DELETE\s0 queries).
.ie n .IP "srow( $table, [ $table2 ] ) \-> SQL::DB::Expr based objects" 4
.el .IP "srow( \f(CW$table\fR, [ \f(CW$table2\fR ] ) \-> SQL::DB::Expr based objects" 4
.IX Item "srow( $table, [ $table2 ] ) -> SQL::DB::Expr based objects"
Returns objects representing abstract rows from \f(CW$tabl\fRe(s). Each object
has a method for each column in the table. These srow objects can be
used in \s-1SQL::DB\s0 \*(L"\fIfetch()\fR\*(R" and \*(L"\fIfetch1()\fR\*(R" methods (for \s-1SELECT\s0
queries).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1SQL::DB\s0, sqldb-schema
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Lawrence <nomad@null.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2007\-2011 Mark Lawrence <nomad@null.net>
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version.
